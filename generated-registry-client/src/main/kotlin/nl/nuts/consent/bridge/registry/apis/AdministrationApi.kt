/**
* Nuts registry API spec
* API specification for RPC services available at the nuts-registry
*
* OpenAPI spec version: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package nl.nuts.consent.bridge.registry.apis

import nl.nuts.consent.bridge.registry.models.InlineResponse200

import nl.nuts.consent.bridge.registry.infrastructure.*

class AdministrationApi(basePath: kotlin.String = "http://localhost") : ApiClient(basePath) {

    /**
    * Verifies the registry data (owned by the vendor) and fixes where necessarry (e.g. issue certificates) if fix &#x3D; true.
    * 
    * @param fix Wheter to fix data in the registry that&#39;s broken or requires upgrading (optional, default to null)
    * @return InlineResponse200
    */
    @Suppress("UNCHECKED_CAST")
    fun verify(fix: kotlin.Boolean) : InlineResponse200 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("fix" to listOf("$fix"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/admin/verify",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse200>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse200
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
