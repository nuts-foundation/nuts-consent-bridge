/*
 * Nuts consent bridge
 * Copyright (C) 2019 Nuts community
 *
 *  This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */


buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    ext {
        kotlinVersion = '1.2.71'
        cordaVersion = '4.0'
        cordaGradlePluginsVersion = '4.0.25'
        springBootVersion = '2.1.3.RELEASE'
        springBootGradlePluginVersion = '2.1.3.RELEASE'
        openApiPluginVersion = '3.3.4'
        nutsVersion = project.version
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "net.corda.plugins:cordapp:$cordaGradlePluginsVersion"
        classpath "net.corda.plugins:cordformation:$cordaGradlePluginsVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootGradlePluginVersion"
        classpath "org.openapitools:openapi-generator-gradle-plugin:$openApiPluginVersion"
    }
}

ext {
    jacksonVersion = '2.9.8'
    slf4jVersion = '1.7.25'
    log4jVersion = '2.9.1'
    zeromqVersion = '0.5.0'
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url "https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases/"
        }
    }

    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    // exclude unneeded libs
    configurations {
        implementation {
            exclude group: 'com.github.corda.crash'
            exclude group: 'com.github.bft-smart', module: 'library'
            exclude group: 'ch.qos.logback'
            exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        }

        testImplementation {
            exclude group: 'com.github.corda.crash'
            exclude group: 'com.github.bft-smart', module: 'library'
        }
    }

    dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

        implementation("org.springframework.boot:spring-boot-starter-data-rest:${springBootVersion}") {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
        }
        implementation("org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}")

        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
    }

    jacoco {
        toolVersion = "0.8.3"
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    test {
        jvmArgs "-javaagent:${project.rootDir}/lib/quasar-0.7.x.jar",
                "-Dco.paralleluniverse.fibers.verifyInstrumentation=true"
        environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "test"
    }
}

dependencies {
    implementation project(":impl")
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        html.destination file("${buildDir}/reports/jacoco/html")
        csv.enabled false
    }

    subprojects.each {
        sourceSets it.sourceSets.main
    }
}

//change to dependsOn check when IT are added
codeCoverageReport.dependsOn {
    subprojects*.test
}

apply plugin: 'org.openapi.generator'

check.dependsOn jacocoTestReport


openApiGenerate {
    generatorName = "kotlin-spring"
    outputDir = "${project.rootDir}/generated"
    //inputSpec = "https://nuts-node-rpc-spec.readthedocs.io/en/latest/_static/nuts-consent-bridge.yaml"
    inputSpec = "../nuts-node-rpc-spec/docs/_static/nuts-consent-bridge.yaml"
    verbose = false
    apiPackage = "nl.nuts.consent.bridge.api"
    modelPackage = "nl.nuts.consent.bridge.model"
    invokerPackage = "nl.nuts.consent.bridge"
    configOptions = [
            dateLibrary: "java8",
            serviceInterface: true,
            exceptionHandler: true,
            gradleBuildFile: false,
            supportingFiles: []
    ]
    skipOverwrite = false
}

openApiValidate {
    //inputSpec = "../nuts-node-rpc-spec/docs/_static/nuts-consent-bridge.yaml"
    inputSpec = "https://nuts-node-rpc-spec.readthedocs.io/en/latest/_static/nuts-consent-bridge.yaml"
}