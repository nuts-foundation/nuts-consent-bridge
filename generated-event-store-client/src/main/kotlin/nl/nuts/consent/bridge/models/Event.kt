/**
* Nuts event store spec
* API specification for event store. The event store records the state of the in-flight events. 
*
* OpenAPI spec version: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package nl.nuts.consent.bridge.models


import com.squareup.moshi.Json
/**
 * 
 * @param uuid V4 UUID
 * @param state 
 * @param retryCount 0 to X
 * @param externalId ID calculated by crypto using BSN and private key of custodian
 * @param consentId V4 UUID assigned by Corda to a record
 * @param custodian Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN 
 * @param payload NewConsentRequestState JSON as accepted by consent-bridge (:ref:`nuts-consent-bridge-api`)
 * @param error error reason in case of a functional error
 */
data class Event (
    /* V4 UUID */
    val uuid: java.util.UUID,
    val state: Event.State,
    /* 0 to X */
    val retryCount: kotlin.Int,
    /* ID calculated by crypto using BSN and private key of custodian */
    val externalId: kotlin.String,
    /* V4 UUID assigned by Corda to a record */
    val consentId: java.util.UUID,
    /* Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN  */
    val custodian: kotlin.String,
    /* NewConsentRequestState JSON as accepted by consent-bridge (:ref:`nuts-consent-bridge-api`) */
    val payload: kotlin.String,
    /* error reason in case of a functional error */
    val error: kotlin.String? = null
) {

    /**
    * 
    * Values: requested,offered,toBeAccepted,accepted,finalized,toBePersisted,completed,error
    */
    enum class State(val value: kotlin.String){
    
        @Json(name = "requested") requested("requested"),
    
        @Json(name = "offered") offered("offered"),
    
        @Json(name = "to be accepted") toBeAccepted("to be accepted"),
    
        @Json(name = "accepted") accepted("accepted"),
    
        @Json(name = "finalized") finalized("finalized"),
    
        @Json(name = "to be persisted") toBePersisted("to be persisted"),
    
        @Json(name = "completed") completed("completed"),
    
        @Json(name = "error") error("error");
    
    }

}

