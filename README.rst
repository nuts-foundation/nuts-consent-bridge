nuts-consent-bridge
###################

App to bridge gap between the Corda kotlin world and Nuts polyglot service space

.. image:: https://circleci.com/gh/nuts-foundation/nuts-consent-bridge.svg?style=svg
    :target: https://circleci.com/gh/nuts-foundation/nuts-consent-bridge
    :alt: Build Status

.. image:: https://readthedocs.org/projects/nuts-consent-bridge/badge/?version=latest
    :target: https://nuts-documentation.readthedocs.io/projects/nuts-consent-bridge/en/latest/?badge=latest
    :alt: Documentation Status

.. image:: https://codecov.io/gh/nuts-foundation/nuts-consent-bridge/branch/master/graph/badge.svg
    :target: https://codecov.io/gh/nuts-foundation/nuts-consent-bridge

.. image:: https://api.codacy.com/project/badge/Grade/9118a6e2254e4db0a6c1fc3725a6ed02
    :target: https://www.codacy.com/app/woutslakhorst/nuts-consent-bridge

The consent bridge is written in Kotlin and can be build by Gradle.

Dependencies
************

Since the bridge depends on Corda, Java 1.8 is needed. For the Oracle sdk, this means that your version needs to be > 1.8 update 151.
This can give problems on several linux distro's. In that case use the latest OpenJDK 1.8.

The project is build with Gradle. A gradle wrapper is present in the project.

Generating code
***************

Api stubs are generated by running

.. code-block:: shell

    ./gradlew codegen

Running tests
*************


To run all tests, including integration tests, `nats-streaming-server <https://nats-io.github.io/docs/nats_streaming/gettingstarted/install.html#nats-streaming-server-installation>`_ is required to be installed.
Tests can be run by executing

.. code-block:: shell

    ./gradlew test

Building
********

Executable can be build by executing

.. code-block:: shell

    ./gradlew bootJar

Docker
******

To build locally

.. code-block:: shell

    docker build . -f docker/Dockerfile-dev

The ``nutsfoundation/nuts-consent-bridge:latest-dev`` docker image can be used to connect to one of the 2 consent nodes locally. Checkout :ref:`nuts-network-local-development-docker` for setting up a complete environment with ``docker-compose``.

README
******

The readme is auto-generated from a template and uses the documentation to fill in the blanks.

.. code-block:: shell

    ./generate_readme.sh

Documentation
*************

To generate the documentation, you'll need python3, sphinx and a bunch of other stuff. See :ref:`nuts-documentation-development-documentation`
The documentation can be build by running

.. code-block:: shell

    /docs $ make html

The resulting html will be available from ``docs/_build/html/index.html``

Configuration
*************

The *Nuts Consent Bridge* application is a Spring boot application. Therefore all `Spring methods of configuring <https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html>`_ can be used including:

- Using a runtime JVM parameter specifying the spring configuration file: ``java -jar myproject.jar --spring.config.location=/tmp/overrides.properties``
- Using environment variables, replacing all camelCasing and dots with underscores. So ``nuts.consent.zmq.publisherAddress`` becomes ``NUTS_CONSENT_ZMQ_PUBLISHER_ADDRESS``

=====================================   ====================    ================================================================
Property                                Default                 Description
=====================================   ====================    ================================================================
nuts.consent.nats.address               nats://localhost:4222   The Nats address for events from and to *Nuts Service Space*
nuts.consent.nats.cluster               test-cluster            The Nats clusterID
nuts.consent.rpc.host                   localhost               The host running the Consent Cordapp.
nuts.consent.rpc.port                   7887                    Port for Consent Cordapp.
nuts.consent.rpc.user                   admin                   Configured user on the RPC methods of the Consent Cordapp node.
nuts.consent.rpc.password               nuts                    ^^ same, but password ^^
nuts.consent.rpc.retryIntervalSeconds   5                       Cooldown period before trying to reconnect to node.
nuts.consent.rpc.retryCount             0                       How many times to reconnect (0 for infinite)
nuts.consent.registry.url               http://localhost:8088   The address + path where the Nuts registry is running
=====================================   =====================   ================================================================

